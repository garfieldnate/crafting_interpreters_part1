// This file is generated by GenerateAst.java. DO NOT EDIT DIRECTLY! Edit GenerateAst.java instead.
package com.craftinginterpreters.lox;

abstract class Expr {
    interface Visitor<R> {
        R visitGroupingExpr(Grouping expr);

        R visitLiteralExpr(Literal expr);

        R visitUnaryExpr(Unary expr);

        R visitBinaryExpr(Binary expr);
    }

    static class Grouping extends Expr {
        Grouping(final Expr expression) {
            this.expression = expression;
        }

        @Override
        <R> R accept(final Visitor<R> visitor) {
            return visitor.visitGroupingExpr(this);
        }

        final Expr expression;
    }

    static class Literal extends Expr {
        Literal(final Object value) {
            this.value = value;
        }

        @Override
        <R> R accept(final Visitor<R> visitor) {
            return visitor.visitLiteralExpr(this);
        }

        final Object value;
    }

    static class Unary extends Expr {
        Unary(final Token operator, final Expr right) {
            this.operator = operator;
            this.right = right;
        }

        @Override
        <R> R accept(final Visitor<R> visitor) {
            return visitor.visitUnaryExpr(this);
        }

        final Token operator;
        final Expr right;
    }

    static class Binary extends Expr {
        Binary(final Expr left, final Token operator, final Expr right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        <R> R accept(final Visitor<R> visitor) {
            return visitor.visitBinaryExpr(this);
        }

        final Expr left;
        final Token operator;
        final Expr right;
    }

    abstract <R> R accept(Visitor<R> visitor);
}
